 - CHECKLIST -

DESCRIPTION
- dynamic version (ass 1) using javascript
	optional: change/extend the main theme
- use DOM methods, elements and events 
	(to interactively modify the content & appearance of the web-pages according to user actions)
- use event listeners to process the events
- implement at leat 1 case of event propagation (w3c model)

- create an additional page whose main content part is constructed purely through DOM manipulation
	(it should represent a (small) structured knowledge base of the theme)
- entries of thiw "knowledge base" should be objects of differenct classes
	(their content should be shortened versions of the content constituting the rest of the website)
- A class model of the theme should have at least 3 classes and at least 1 case of inheritance
- Classes/objects should be connected between each other.
- Links should be provided te browse across connected entries of the knowledge base.
- Use ES6 classes and ES6-style object construction

- Use external javascript libraries (jQuery and jQuery UI) to speed op the development
- Implement a contextual menu that allows the user to change the appearance of particular elementst on the web-pages

- add a "Plot" page to the website
	use FLOT library (or any other) to implement an interactive plot
	supply the plit with data relevant ot the topic of the website
	the plot must be interactive (the user clicks on something in a plot should cause change in data visualisation)

EXTRA CREDIT
- a user can use the contextual menu also to copy, cut and paste content at any place of the Website. 
- Page reloads should refresh HTML back to its original stage.

REQUIREMENTS
- requirements of assignment 1
- separate scripting from the content
- context menu should allow at least:
	changing the weight of the font to bold and back
	the style of the font to italic and back
	the color of the font (between several colors)
- The plot must be interactive
- Knowledge based should be generated, E6-style class based, interconnected

GOOD CODING STYLE
- rules assigment 1
- camelCase notation when naming the methods, variables and classes
- use meaningful comments
- terminate JavaScript statements with a ","